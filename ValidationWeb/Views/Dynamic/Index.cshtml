@using ValidationWeb.Models
@model DynamicReportViewModel


<div class="row">
  <h2 class="vp-body-header col-8 justify-content-start align-self-center">
    Dynamic Reports for Program Area @Model.FocusedProgramArea.Description:
  </h2>
</div>

<form>
    @if (Model.User.AppRole.Name.Equals(PortalRoleNames.DataOwner))
    {
        <div class="row mb-2">
            <div class="col-sm-10">
                Your account is assigned the <strong>Data Owner</strong> role. This means you can only view and run
                reports approved for Data Owners from this page. Reports containing student details are not available. Additionally, the data returned will be for all districts and not filtered by your selected district in the nav-bar above.
            </div>
        </div>
    }

    <div class="row" id="noReportsMessage" style="display: none;">
        <div class="col-sm-10">
            There are no reports defined for the currently selected school year.
        </div>
    </div>

    <div class="form-group row" id="reportsUi" style="display: none;">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-3 pull-right text-right">
                    <label for="selectDataView" class="text-right col-form-label col-form-label-sm">Report Name</label>
                </div>
                <div class="nav-item col-sm-6">
                    <select class="form-control validation-dropdown-menu" id="selectDataView" name="selectDataView" style="width: 100%">
                        <option selected="selected" value="">- make a selection -</option>
                    </select>
                </div>
            </div>
            <div class="row" style="margin-top: 15px; display: none" id="selectWrapper">
                <div class="col-md-12">
                    <select multiple="multiple" size="15" class="form-control form-control-sm" id="fieldSelect" name="fieldSelect[]"></select>
                </div>
            </div>
            <div class="row" id="generateReportDiv" style="display: none">
                <div class="col-sm-3">
                    <button type="button" style="margin-top: 15px" id="generateReport"
                            class="btn prime-blue white-heavy-text margin10 justify-self-end">
                        Generate Report
                    </button>
                </div>
            </div>
            <div class="row" id="generateReportProgress" style="display: none">
                <div class="col-sm-12">
                    <div class="progress mt-3" style="height: 2em">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100"
                             aria-valuemin="0" aria-valuemax="100" style="width: 100%;">
                            Generating Report...
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" id="generateReportError" style="display: none">
                <div class="col-sm-12">
                    Unable to generate report. An error was encountered while retrieving data.
                </div>
            </div>
        </div>

        <div class="col-sm-4 offset-1">
            <h4 id="reportTitle"></h4>
            <p id="reportDescription"></p>
        </div>
    </div>
</form>

@section scripts
{
    <script type="text/javascript">

        var viewData = {};

        $(document).on('focus',
            '.select2.select2-container',
            function(e) {
                // console.log("%c Focus Event ", "background:green; color:white", e);

                var initialFocusEvent = e.originalEvent; //don't re-open on close focus event
                var targetIsInput = e.target && $(e.target).is("input"); // don't open when focused from input
                var relTargetIsInput = e.relatedTarget && $(e.relatedTarget).is("input");
                var anyTargetIsInput = targetIsInput || relTargetIsInput;

                // only open on original attempt - close focus event should not fire open
                if (initialFocusEvent && !anyTargetIsInput) {
                    // console.log("%c Call Select2 Open ", "background:orange; color:white");
                    $(this).siblings('select').select2('open');
                }
            });

        $(document).ready(function() {

            $('#selectDataView').select2({
                minimumResultsForSearch: Infinity,
                dropdownAutoWidth: true,
                width: 'resolve'
            });

            $('#generateReport').on('click', createReport);

            var selectElement = $('select[name="fieldSelect[]"]');

            var fieldSelect = selectElement
                .hide()
                .bootstrapDualListbox({
                    nonSelectedListLabel: 'Available Fields',
                    selectedListLabel: 'Selected Fields',
                    //preserveSelectionOnMove: 'moved',
                    moveOnSelect: false,
                    selectorMinimalHeight: 200
                });

            selectElement.on('change',
                function(e) {
                    var newState = $(this).val();

                    var generateReportDiv = $('#generateReportDiv');
                    if (newState && newState.length) {
                        generateReportDiv.show();
                    } else {
                        generateReportDiv.hide();
                    }
                });

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetReportDefinitions", "Dynamic")?schoolYearId=@Model.SchoolYear.Id',
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                success: function(data) {

                    if (!data || data.length === 0) {
                        $('#noReportsMessage').show();
                        $('#reportsUi').hide();
                    } else {
                        $('#noReportsMessage').hide();
                        $('#reportsUi').show();
                    }

                    var selectDataView = $('#selectDataView');
                    selectDataView.empty();
                    selectDataView.append($('<option>', { value: '', text: '- select a report -' }));
                    $.each(data,
                        function(i, item) {
                            selectDataView.append($('<option>', { value: item.Id, text: item.Name }));
                            viewData[item.Id] = item;
                        });
                }
            });

            var dualListContainer = fieldSelect.bootstrapDualListbox('getContainer');
            dualListContainer.find('.moveall').text('').addClass('fa fa-angle-double-right');
            dualListContainer.find('.removeall').text('').addClass('fa fa-angle-double-left');
            dualListContainer.find('.move').text('').addClass('fa fa-angle-right');
            dualListContainer.find('.remove').text('').addClass('fa fa-angle-left');
            dualListContainer.find('.btn').addClass('prime-blue white-heavy-text');

            $("#selectDataView").change(function(e) {
                var dataView = $(this).val();

                if (!dataView) {
                    $('#selectWrapper').hide();
                    return;
                }

                $('#selectWrapper').show();
                $('#generateReportDiv').hide();

                var rules = viewData[dataView];
                $('#reportTitle').text(rules.Name)
                $('#reportDescription').text(rules.Description);

                if (dataView.length > 0) {

                    var select = $('#fieldSelect');
                    select.empty();

                    $.each(rules.Fields,
                        function(index, value) {
                            if (value.Enabled) {
                                select.append($('<option>',
                                    {
                                        value: value.Id,
                                        text: (value.Description ? value.Description : value.Field.Name)
                                    }));
                            }
                        });

                    fieldSelect.bootstrapDualListbox('refresh');
                    $(this).blur();
                    fieldSelect.focus();
                }
            });
        });

        function createReport() {

            var reportRequest = {
                ReportDefinitionId: $('#selectDataView').val(),
                SchoolYearId: '@Model.SchoolYear.Id',
                SelectedFields: $('select[name="fieldSelect[]"]').val()
            };

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                var a;
                console.log(xhttp);

                if (xhttp.readyState === 4) {
                    if (xhttp.status === 200) {
                        $('#generateReportDiv').show();
                        $('#generateReportProgress').hide();

                        // Trick for making downloadable link
                        a = document.createElement('a');
                        a.href = window.URL.createObjectURL(xhttp.response);
                        // Give filename you wish to download
                        a.download = $('#selectDataView option:selected').text() + '-@(Model.SchoolYear.EndYear).csv';
                        a.style.display = 'none';
                        document.body.appendChild(a);
                        a.click();
                    } else {
                        $('#generateReportDiv').show();
                        $('#generateReportProgress').hide();
                        $('#generateReportError').show();
                    }
                }
            };

            $('#generateReportError').hide();
            $('#generateReportDiv').hide();
            $('#generateReportProgress').show();
            // Post data to URL which handles post request
            xhttp.open("POST", '@Url.Action("GenerateReport", "Dynamic")');
            xhttp.setRequestHeader("Content-Type", "application/json");
            xhttp.responseType = 'blob';
            xhttp.send(JSON.stringify(
                {
                    'request': reportRequest,
                    'districtId': '@Model.FocusedEdOrg.Id'
                }));
        }
    </script>
}
